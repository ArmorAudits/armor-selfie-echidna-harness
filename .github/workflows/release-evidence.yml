name: Release Evidence

on:
  schedule:
    - cron: "17 3 * * *"  # 03:17 UTC daily
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      tag:
        description: Release tag (e.g., v0.1.4). If empty, uses latest release.
        required: false
        type: string

permissions:
  contents: write
  actions: read

jobs:
  evidence:
    runs-on: ubuntu-24.04
    env:
      REPO: ${{ github.repository }}
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      TAG_INPUT: ${{ inputs.tag }}
    steps:
      - name: Check out repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          set-safe-directory: true

      - name: Resolve tag/prev/sha
        id: meta
        shell: bash
        run: |
          set -euo pipefail
          if [ -n "${TAG_INPUT:-}" ]; then
            TAG="$TAG_INPUT"
          else
            TAG="$(gh release view -R "$REPO" --json tagName --jq .tagName)"
          fi
          PREV="$(gh api repos/$REPO/releases --paginate \
            --jq '[.[]|select(.draft==false)]|sort_by(.created_at)|reverse|.[1].tag_name // ""')"
          SHA="$(gh api repos/$REPO/commits/$TAG --jq .sha)"
          echo "tag=$TAG"  >> "$GITHUB_OUTPUT"
          echo "prev=$PREV" >> "$GITHUB_OUTPUT"
          echo "sha=$SHA"  >> "$GITHUB_OUTPUT"

      - name: Generate evidence
        id: gen
        shell: bash
        env:
          TAG:  ${{ steps.meta.outputs.tag }}
          PREV: ${{ steps.meta.outputs.prev }}
          SHA:  ${{ steps.meta.outputs.sha }}
        run: |
          set -euo pipefail
          OUT="release-evidence-$TAG.md"

          gh release view "$TAG" -R "$REPO" \
            --json name,tagName,publishedAt,author,url,targetCommitish,assets \
            > /tmp/release.json

          # Build the set of SHAs we’ll match runs against
          SHAS=""
          SHAS+="$SHA"$'\n'
          [ -n "${GITHUB_SHA:-}" ] && SHAS+="$GITHUB_SHA"$'\n'
          TGT="$(jq -r '.targetCommitish // empty' /tmp/release.json || true)"
          if [ -n "$TGT" ]; then
            TGT_SHA="$(gh api "repos/$REPO/commits/$TGT" --jq .sha || true)"
            [ -n "$TGT_SHA" ] && SHAS+="$TGT_SHA"$'\n'
          fi
          REL_RUN_SHAS="$(gh run list -R "$REPO" --limit 100 --json headSha,event,displayTitle \
                         | jq -r --arg TAG "$TAG" \
                              '.[] | select(.event=="release" and (.displayTitle|tostring|test($TAG))) | .headSha' || true)"
          [ -n "${REL_RUN_SHAS:-}" ] && SHAS+="$REL_RUN_SHAS"$'\n'
          SHAS_JSON="$(printf "%s" "$SHAS" | tr -d '\r' | jq -R -s 'split("\n")|map(select(length>0))|unique')"

          {
            echo "# Release Evidence for $TAG"
            echo
            jq -r '{name:.name, tag:.tagName, published_at:.publishedAt, author:.author.login, html_url:.url}
                    | to_entries[] | "* \(.key): \(.value)"' /tmp/release.json

            echo
            if [ -n "${PREV:-}" ] && [ "$PREV" != "$TAG" ]; then
              echo "## Commits since $PREV"
              gh api "repos/$REPO/compare/$PREV...$TAG" \
                --jq '.commits[] | "* \(.sha[0:7]) \(.commit.author.date) - \(.commit.message|split("\n")[0]) by \(.commit.author.name)"'
            else
              echo "## Commits"
              gh api "repos/$REPO/commits" \
                --jq '.[0:20][] | "* \(.sha[0:7]) - \(.commit.message|split("\n")[0]) by \(.commit.author.name) on \(.commit.author.date)"' || true
            fi

            echo
            echo "## Workflow runs related to $TAG"
            MATCHED="$(
              gh run list -R "$REPO" --limit 200 \
                --json name,conclusion,status,headSha,databaseId,headBranch,event,displayTitle \
              | jq -r \
                  --argjson SHAS "$SHAS_JSON" \
                  --arg REPO "$REPO" \
                  --arg RUN_ID "${GITHUB_RUN_ID:-}" '
                  map(select(.headSha as $s | $SHAS | index($s)))
                  | sort_by(.databaseId)
                  | unique_by(.databaseId)
                  | (if ($RUN_ID|length)>0 then map(select((.databaseId|tostring) != $RUN_ID)) else . end)
                  | .[]
                  | ["* " + (.name // "unknown"),
                     "event:" + (.event // "unknown"),
                     "branch:" + (.headBranch // "unknown"),
                     "conclusion:" + ((.conclusion // .status // "unknown")),
                     "run_id=" + ((.databaseId|tostring) // "unknown"),
                     ("https://github.com/" + $REPO + "/actions/runs/" + ((.databaseId|tostring) // ""))]
                  | join(" • ")
                  '
            )"
            if [ -n "$MATCHED" ]; then
              echo "$MATCHED"
            else
              echo "* No related workflow runs found for SHAs: $(printf "%s" "$SHAS_JSON")"
            fi

            echo
            echo "## Release assets"
            jq -r '
              def hr:
                . as $b
                | if   $b < 1024               then "\($b) B"
                  elif $b < (1024*1024)        then "\(($b/1024|floor)) KB"
                  elif $b < (1024*1024*1024)   then "\(($b/1024/1024|floor)) MB"
                  else                              "\(($b/1024/1024/1024|floor)) GB"
                  end;
              .assets[]? | "* \(.name) • size:\(.size|hr) • downloads:\(.download_count // 0)"
            ' /tmp/release.json

            if SINCE="$(gh release view "$PREV" -R "$REPO" --json publishedAt --jq .publishedAt 2>/dev/null || true)"; then
              if [ -n "$SINCE" ]; then
                echo
                echo "## PRs merged since $PREV"
                gh pr list -R "$REPO" -s merged -L 100 \
                  --search "merged:>=$SINCE" \
                  --json number,title,mergedAt,author,url \
                | jq -r '.[] | "* #\(.number) - \(.title) by @\(.author.login) on \(.mergedAt) • \(.url)"'
              fi
            fi
          } > "$OUT"

          echo "out=$OUT" >> "$GITHUB_OUTPUT"

      - name: Upload evidence to release
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.meta.outputs.tag }}
          files: ${{ steps.gen.outputs.out }}
          overwrite_files: true
